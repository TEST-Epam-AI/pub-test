name: Build and SonarCloud Analysis

on:
  push:
    branches:
      - '**'  # Trigger for all branches
  pull_request:
    branches:
      - '**'  # Trigger for all pull requests targeting any branch
    types:
      - opened
      - synchronize
      - reopened

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis relevancy

      # Step 2: Set up JDK
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11  # Adjust based on your projectâ€™s requirements

      # Step 3: Build Java Project
      - name: Build with Maven
        run: mvn clean compile
        # If using Gradle, replace with `gradle build`

      # Step 4: Run SonarCloud Scan using Docker
      - name: Run SonarCloud Scan
        run: |
          docker run \
            --rm \
            -e SONAR_HOST_URL=https://sonarcloud.io \
            -e SONAR_TOKEN=${{ secrets.PYSONAR }} \
            -v "${{ github.workspace }}:/usr/src" \
            sonarsource/sonar-scanner-cli:latest \
            -Dsonar.projectKey=TEST-Epam-AI_pub-python \
            -Dsonar.organization=test-epam-ai \
            -Dsonar.branch.name=${{ github.ref_name }} \
            -Dsonar.java.binaries=target/classes  # Specify compiled classes directory for Maven

      # Step 5: Export Issues to CSV
      - name: Export SonarCloud Issues to CSV
        run: |
          cat << EOF > export_sonarcloud_issues.py
          import requests
          import csv
          import os

          token = '${{ secrets.PYSONAR }}'
          branch = os.getenv('GITHUB_REF_NAME')
          headers = {'Authorization': f'Bearer {token}'}

          params = {
              'componentKeys': 'TEST-Epam-AI_pub-python',
              'branch': branch,
              'ps': 500,
              'p': 1
          }

          issues_url = 'https://sonarcloud.io/api/issues/search'

          all_issues = []
          while True:
              response = requests.get(issues_url, headers=headers, params=params)
              response.raise_for_status()
              data = response.json()
              all_issues.extend(data.get('issues', []))
              if params['p'] * params['ps'] >= data.get('total', 0):
                  break
              params['p'] += 1

          with open('sonarcloud_issues.csv', 'w', newline='', encoding='utf-8') as file:
              writer = csv.writer(file)
              writer.writerow([
                  'Key', 'Rule', 'Severity', 'Type', 'Message', 'Line',
                  'Component', 'Effort', 'Debt', 'Status', 'Resolution',
                  'Creation Date', 'Update Date'
              ])
              for issue in all_issues:
                  writer.writerow([
                      issue.get('key', 'N/A'),
                      issue.get('rule', 'N/A'),
                      issue.get('severity', 'N/A'),
                      issue.get('type', 'N/A'),
                      issue.get('message', 'N/A'),
                      issue.get('line', 'N/A'),
                      issue.get('component', 'N/A'),
                      issue.get('effort', 'N/A'),
                      issue.get('debt', 'N/A'),
                      issue.get('status', 'N/A'),
                      issue.get('resolution', 'N/A'),
                      issue.get('creationDate', 'N/A'),
                      issue.get('updateDate', 'N/A'),
                  ])
          EOF
          python3 export_sonarcloud_issues.py

      # Step 6: Upload CSV as Artifact
      - name: Upload CSV Report
        uses: actions/upload-artifact@v3
        with:
          name: sonarcloud_issues
          path: sonarcloud_issues.csv
